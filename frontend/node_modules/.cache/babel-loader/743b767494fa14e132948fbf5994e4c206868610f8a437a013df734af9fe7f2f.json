{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SANGAM REVATHI\\\\OneDrive\\\\Documents\\\\resume_Projects\\\\blog-website\\\\frontend\\\\src\\\\components\\\\Weather-Forecast\\\\WeatherApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Navbar from './Navbar';\nimport '../WeatherApp.css';\n\n// Helper function to format date/time for forecast (Day, Mon)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst formatForecastDay = (dt_txt, timezoneOffset) => {\n  // dt_txt is in UTC, timezoneOffset is in seconds\n  const date = new Date(new Date(dt_txt).getTime() + timezoneOffset * 1000);\n  const options = {\n    weekday: 'short',\n    month: 'short',\n    day: 'numeric'\n  };\n  return date.toLocaleDateString('en-US', options).replace(/, \\d{4}/, ''); // Remove year\n};\nconst WeatherApp = () => {\n  _s();\n  var _weatherData$main, _weatherData$wind, _weatherData$main2;\n  const OPENWEATHER_API_KEY = \"93777aa63aa67084e1bd09488ec46331\";\n  const [city, setCity] = useState('Durgapur');\n  const [weatherData, setWeatherData] = useState(null);\n  const [forecastData, setForecastData] = useState([]);\n  const [error, setError] = useState(null);\n  const [searchCity, setSearchCity] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fetchWeatherAndForecast = useCallback(async cityName => {\n    setLoading(true);\n    setError(null);\n    try {\n      const weatherResponse = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=${OPENWEATHER_API_KEY}`);\n      if (!weatherResponse.ok) {\n        if (weatherResponse.status === 404) {\n          throw new Error('City not found. Please enter a valid city name.');\n        }\n        throw new Error(`Error fetching current weather: ${weatherResponse.statusText}`);\n      }\n      const currentWeatherData = await weatherResponse.json();\n      setWeatherData(currentWeatherData);\n      const forecastResponse = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&units=metric&appid=${OPENWEATHER_API_KEY}`);\n      if (!forecastResponse.ok) {\n        throw new Error(`Error fetching forecast: ${forecastResponse.statusText}`);\n      }\n      const fiveDayForecastData = await forecastResponse.json();\n\n      // Filter forecast data to get one entry per day for the next 5 days\n      const dailyForecastsMap = new Map(); // Use a Map to store unique days\n      const today = new Date((currentWeatherData.dt + currentWeatherData.timezone) * 1000).toISOString().split('T')[0]; // Get today's date in local time\n\n      if (fiveDayForecastData.list) {\n        fiveDayForecastData.list.forEach(item => {\n          const itemDate = new Date((item.dt + currentWeatherData.timezone) * 1000);\n          const dayKey = itemDate.toISOString().split('T')[0]; // YYYY-MM-DD\n\n          if (dayKey !== today) {\n            const localHour = itemDate.getUTCHours();\n            if (!dailyForecastsMap.has(dayKey) && localHour >= 10 && localHour <= 16) {\n              dailyForecastsMap.set(dayKey, item);\n            }\n          }\n        });\n      }\n      fiveDayForecastData.list.forEach(item => {\n        const itemDate = new Date((item.dt + currentWeatherData.timezone) * 1000);\n        const dayKey = itemDate.toISOString().split('T')[0];\n        if (dayKey !== today && !dailyForecastsMap.has(dayKey)) {\n          dailyForecastsMap.set(dayKey, item);\n        }\n      });\n      const sortedForecast = Array.from(dailyForecastsMap.values()).sort((a, b) => a.dt - b.dt).slice(0, 5); // Get exactly the next 5 days\n\n      setForecastData(sortedForecast);\n    } catch (err) {\n      console.error('Error fetching weather data:', err);\n      setError(err.message || 'Failed to fetch weather data. Please try again.');\n      setWeatherData(null);\n      setForecastData([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [OPENWEATHER_API_KEY]);\n  useEffect(() => {\n    fetchWeatherAndForecast(city);\n  }, [city, fetchWeatherAndForecast]);\n  const handleSearch = e => {\n    e.preventDefault();\n    if (searchCity.trim()) {\n      setCity(searchCity.trim());\n      setSearchCity('');\n    }\n  };\n  const formatDate = (timestamp, timezoneOffset) => {\n    const date = new Date((timestamp + timezoneOffset) * 1000);\n    const options = {\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric'\n    };\n    return date.toLocaleDateString(undefined, options);\n  };\n  const getIconUrl = iconCode => `http://openweathermap.org/img/wn/${iconCode}@2x.png`;\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-app\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading weather data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-app\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containerEl\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"city\",\n        children: \"Weather in City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), weatherData ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"temp\",\n          children: weatherData.main.temp.toFixed(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"temp\",\n          children: \"\\xB0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 89\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"city-time\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"name\",\n            id: \"cityName\",\n            children: [weatherData.name, \" \\u26B2\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"data\",\n              children: formatDate(weatherData.dt, weatherData.timezone)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather\",\n          children: [weatherData.weather && weatherData.weather[0] && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: getIconUrl(weatherData.weather[0].icon),\n            className: \"icon\",\n            alt: weatherData.weather[0].description,\n            width: \"50\",\n            height: \"50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"condition\",\n            children: weatherData.weather[0].main\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true) :\n      /*#__PURE__*/\n      // Display error if no weatherData\n      _jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error || 'No weather data available.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"locationInput\",\n        onSubmit: handleSearch,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"search\",\n          id: \"searchBar\",\n          placeholder: \"Search location..\",\n          value: searchCity,\n          onChange: e => setSearchCity(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit\",\n          id: \"searchBtn\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"material-symbols-outlined\",\n            id: \"search_icon\",\n            children: \"search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Weather details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Humidity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"humidity\",\n            id: \"humidity\",\n            children: [weatherData === null || weatherData === void 0 ? void 0 : (_weatherData$main = weatherData.main) === null || _weatherData$main === void 0 ? void 0 : _weatherData$main.humidity, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Wind Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"wind\",\n            id: \"wind\",\n            children: [weatherData !== null && weatherData !== void 0 && (_weatherData$wind = weatherData.wind) !== null && _weatherData$wind !== void 0 && _weatherData$wind.speed ? (weatherData.wind.speed * 3.6).toFixed(1) : 'N/A', \" km/h\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Pressure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"cloud\",\n            id: \"pressure\",\n            children: [weatherData === null || weatherData === void 0 ? void 0 : (_weatherData$main2 = weatherData.main) === null || _weatherData$main2 === void 0 ? void 0 : _weatherData$main2.pressure, \" millibar\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), forecastData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast-list-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"5-Day Forecast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"forecast-list-details\",\n          children: forecastData.map((forecastItem, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"forecast-list-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"forecast-list-day\",\n              children: formatForecastDay(forecastItem.dt_txt, weatherData.timezone)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `http://openweathermap.org/img/wn/${forecastItem.weather[0].icon}.png`,\n              alt: forecastItem.weather[0].description,\n              width: \"30\",\n              height: \"30\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"forecast-list-temp\",\n              children: [Math.round(forecastItem.main.temp), \"\\xB0C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"forecast-list-condition\",\n              children: forecastItem.weather[0].main\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }, this), error && !weatherData && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        style: {\n          color: 'red',\n          marginTop: '20px'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 43\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n_s(WeatherApp, \"Ge6yDqol5LcXhJFdYCyTYD2NqX8=\");\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","formatForecastDay","dt_txt","timezoneOffset","date","Date","getTime","options","weekday","month","day","toLocaleDateString","replace","WeatherApp","_s","_weatherData$main","_weatherData$wind","_weatherData$main2","OPENWEATHER_API_KEY","city","setCity","weatherData","setWeatherData","forecastData","setForecastData","error","setError","searchCity","setSearchCity","loading","setLoading","fetchWeatherAndForecast","cityName","weatherResponse","fetch","ok","status","Error","statusText","currentWeatherData","json","forecastResponse","fiveDayForecastData","dailyForecastsMap","Map","today","dt","timezone","toISOString","split","list","forEach","item","itemDate","dayKey","localHour","getUTCHours","has","set","sortedForecast","Array","from","values","sort","a","b","slice","err","console","message","handleSearch","e","preventDefault","trim","formatDate","timestamp","undefined","getIconUrl","iconCode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","main","temp","toFixed","id","name","weather","src","icon","alt","description","width","height","onSubmit","type","placeholder","value","onChange","target","humidity","wind","speed","pressure","length","map","forecastItem","index","Math","round","style","color","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/SANGAM REVATHI/OneDrive/Documents/resume_Projects/blog-website/frontend/src/components/Weather-Forecast/WeatherApp.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport Navbar from './Navbar'; \nimport '../WeatherApp.css'; \n\n// Helper function to format date/time for forecast (Day, Mon)\nconst formatForecastDay = (dt_txt, timezoneOffset) => {\n    // dt_txt is in UTC, timezoneOffset is in seconds\n    const date = new Date((new Date(dt_txt).getTime() + timezoneOffset * 1000));\n    const options = { weekday: 'short', month: 'short', day: 'numeric' };\n    return date.toLocaleDateString('en-US', options).replace(/, \\d{4}/, ''); // Remove year\n};\n\nconst WeatherApp = () => {\n    const OPENWEATHER_API_KEY = \"93777aa63aa67084e1bd09488ec46331\"; \n    const [city, setCity] = useState('Durgapur');\n    const [weatherData, setWeatherData] = useState(null);\n    const [forecastData, setForecastData] = useState([]); \n    const [error, setError] = useState(null);\n    const [searchCity, setSearchCity] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const fetchWeatherAndForecast = useCallback(async (cityName) => {\n        setLoading(true);\n        setError(null); \n        try {\n            const weatherResponse = await fetch(\n                `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=${OPENWEATHER_API_KEY}`\n            );\n\n            if (!weatherResponse.ok) {\n                if (weatherResponse.status === 404) {\n                    throw new Error('City not found. Please enter a valid city name.');\n                }\n                throw new Error(`Error fetching current weather: ${weatherResponse.statusText}`);\n            }\n            const currentWeatherData = await weatherResponse.json();\n            setWeatherData(currentWeatherData);\n\n            \n            const forecastResponse = await fetch(\n                `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&units=metric&appid=${OPENWEATHER_API_KEY}`\n            );\n\n            if (!forecastResponse.ok) {\n                throw new Error(`Error fetching forecast: ${forecastResponse.statusText}`);\n            }\n            const fiveDayForecastData = await forecastResponse.json();\n\n            // Filter forecast data to get one entry per day for the next 5 days\n            const dailyForecastsMap = new Map(); // Use a Map to store unique days\n            const today = new Date((currentWeatherData.dt + currentWeatherData.timezone) * 1000)\n                            .toISOString().split('T')[0]; // Get today's date in local time\n\n            if (fiveDayForecastData.list) {\n                fiveDayForecastData.list.forEach(item => {\n                    const itemDate = new Date((item.dt + currentWeatherData.timezone) * 1000);\n                    const dayKey = itemDate.toISOString().split('T')[0]; // YYYY-MM-DD\n\n                    if (dayKey !== today) {\n                        const localHour = itemDate.getUTCHours();\n                        if (!dailyForecastsMap.has(dayKey) && localHour >= 10 && localHour <= 16) {\n                            dailyForecastsMap.set(dayKey, item);\n                        }\n                    }\n                });\n            }\n\n            fiveDayForecastData.list.forEach(item => {\n                const itemDate = new Date((item.dt + currentWeatherData.timezone) * 1000);\n                const dayKey = itemDate.toISOString().split('T')[0];\n                if (dayKey !== today && !dailyForecastsMap.has(dayKey)) {\n                    dailyForecastsMap.set(dayKey, item);\n                }\n            });\n\n            const sortedForecast = Array.from(dailyForecastsMap.values())\n                                        .sort((a, b) => a.dt - b.dt)\n                                        .slice(0, 5); // Get exactly the next 5 days\n\n            setForecastData(sortedForecast);\n\n        } catch (err) {\n            console.error('Error fetching weather data:', err);\n            setError(err.message || 'Failed to fetch weather data. Please try again.');\n            setWeatherData(null);\n            setForecastData([]);\n        } finally {\n            setLoading(false);\n        }\n    }, [OPENWEATHER_API_KEY]);\n\n    useEffect(() => {\n        fetchWeatherAndForecast(city);\n    }, [city, fetchWeatherAndForecast]);\n\n    const handleSearch = (e) => {\n        e.preventDefault();\n        if (searchCity.trim()) {\n            setCity(searchCity.trim());\n            setSearchCity('');\n        }\n    };\n\n    const formatDate = (timestamp, timezoneOffset) => {\n        const date = new Date((timestamp + timezoneOffset) * 1000);\n        const options = { weekday: 'long', month: 'long', day: 'numeric' };\n        return date.toLocaleDateString(undefined, options);\n    };\n\n    const getIconUrl = (iconCode) => `http://openweathermap.org/img/wn/${iconCode}@2x.png`;\n\n    if (loading) {\n        return (\n            <div className=\"weather-app\">\n                <Navbar />\n                <div className=\"loading-container\">\n                    <p>Loading weather data...</p>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"weather-app\">\n            <Navbar />\n            <div className=\"containerEl\">\n                <h3 className=\"city\">Weather in City</h3>\n                {weatherData ? (\n                    <>\n                        <span className=\"temp\">{weatherData.main.temp.toFixed(1)}</span><span className=\"temp\">&#176;</span>\n                        <div className=\"city-time\">\n                            <h1 className=\"name\" id=\"cityName\">{weatherData.name} ⚲</h1>\n                            <small>\n                                <span className=\"data\">{formatDate(weatherData.dt, weatherData.timezone)}</span>\n                            </small>\n                        </div>\n                        <div className=\"weather\">\n                            {weatherData.weather && weatherData.weather[0] && (\n                                <img\n                                    src={getIconUrl(weatherData.weather[0].icon)}\n                                    className=\"icon\"\n                                    alt={weatherData.weather[0].description}\n                                    width=\"50\"\n                                    height=\"50\"\n                                />\n                            )}\n                            <span className=\"condition\">{weatherData.weather[0].main}</span>\n                        </div>\n                    </>\n                ) : (\n                    // Display error if no weatherData\n                    <p className=\"error-message\">{error || 'No weather data available.'}</p>\n                )}\n            </div>\n            <div className=\"panel\">\n                <form id=\"locationInput\" onSubmit={handleSearch}>\n                    <input\n                        type=\"text\"\n                        className=\"search\"\n                        id=\"searchBar\"\n                        placeholder=\"Search location..\"\n                        value={searchCity}\n                        onChange={(e) => setSearchCity(e.target.value)}\n                    />\n                    <button type=\"submit\" className=\"submit\" id=\"searchBtn\">\n                        <span className=\"material-symbols-outlined\" id=\"search_icon\">search</span>\n                    </button>\n                </form>\n\n                <ul className=\"details\">\n                    <h4>Weather details</h4>\n                    <li>\n                        <span>Humidity</span>\n                        <span className=\"humidity\" id=\"humidity\">{weatherData?.main?.humidity}%</span>\n                    </li>\n                    <li>\n                        <span>Wind Speed</span>\n                        <span className=\"wind\" id=\"wind\">{weatherData?.wind?.speed ? (weatherData.wind.speed * 3.6).toFixed(1) : 'N/A'} km/h</span>\n                    </li>\n                    <li>\n                        <span>Pressure</span>\n                        <span className=\"cloud\" id=\"pressure\">{weatherData?.main?.pressure} millibar</span>\n                    </li>\n                </ul>\n\n                {forecastData.length > 0 && (\n                    <div className=\"forecast-list-section\">\n                        <h4>5-Day Forecast</h4>\n                        <ul className=\"forecast-list-details\">\n                            {forecastData.map((forecastItem, index) => (\n                                <li key={index} className=\"forecast-list-item\">\n                                    <span className=\"forecast-list-day\">{formatForecastDay(forecastItem.dt_txt, weatherData.timezone)}</span>\n                                    <img\n                                        src={`http://openweathermap.org/img/wn/${forecastItem.weather[0].icon}.png`}\n                                        alt={forecastItem.weather[0].description}\n                                        width=\"30\"\n                                        height=\"30\"\n                                    />\n                                    <span className=\"forecast-list-temp\">{Math.round(forecastItem.main.temp)}&#176;C</span>\n                                    <span className=\"forecast-list-condition\">{forecastItem.weather[0].main}</span>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n                {/* Display general error message if there's an error and no weather data */}\n                {error && !weatherData && <p className=\"error-message\" style={{ color: 'red', marginTop: '20px' }}>{error}</p>}\n            </div>\n        </div>\n    );\n};\n\nexport default WeatherApp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}